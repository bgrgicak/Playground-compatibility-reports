file:///home/runner/work/playground-tester/playground-tester/node_modules/@wp-playground/cli/run-cli-j-geJYS3.js:325
        throw new Error($, { cause: h });
              ^

Error: [02-Jul-2025 15:54:35 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php:161
Stack trace:
#0 /wordpress/wp-content/plugins/actus-animated-tags/actus-animated-tags.php(203): require_once()
#1 /wordpress/wp-admin/includes/plugin.php(2387): include_once('/wordpress/wp-c...')
#2 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('actus-animated-...')
#3 /internal/eval.php(20): activate_plugin('actus-animated-...')
#4 {main}
  thrown in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php on line 161
[02-Jul-2025 15:54:43 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php:161
Stack trace:
#0 /wordpress/wp-content/plugins/actus-animated-tags/actus-animated-tags.php(203): require_once()
#1 /wordpress/wp-admin/includes/plugin.php(2387): include_once('/wordpress/wp-c...')
#2 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('actus-animated-...')
#3 /internal/eval.php(20): activate_plugin('actus-animated-...')
#4 {main}
  thrown in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php on line 161
[02-Jul-2025 15:54:51 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php:161
Stack trace:
#0 /wordpress/wp-content/plugins/actus-animated-tags/actus-animated-tags.php(203): require_once()
#1 /wordpress/wp-admin/includes/plugin.php(2387): include_once('/wordpress/wp-c...')
#2 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('actus-animated-...')
#3 /internal/eval.php(20): activate_plugin('actus-animated-...')
#4 {main}
  thrown in /wordpress/wp-content/plugins/actus-animated-tags/includes/actus-anit-main.php on line 161
[02-Jul-2025 15:55:29 UTC] PHP Fatal error:  Uncaught TypeError: call_user_func_array(): Argument #1 ($callback) must be a valid callback, function "ass_init" not found or invalid function name in /wordpress/wp-includes/class-wp-hook.php:324
Stack trace:
#0 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(false, Array)
#1 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#2 /wordpress/wp-settings.php(578): do_action('plugins_loaded')
#3 /wordpress/wp-config.php(102): require_once('/wordpress/wp-s...')
#4 /wordpress/wp-load.php(50): require_once('/wordpress/wp-c...')
#5 /internal/eval.php(3): require_once('/wordpress/wp-l...')
#6 {main}
  thrown in /wordpress/wp-includes/class-wp-hook.php on line 324
[02-Jul-2025 15:55:38 UTC] PHP Fatal error:  Uncaught TypeError: call_user_func_array(): Argument #1 ($callback) must be a valid callback, function "ass_init" not found or invalid function name in /wordpress/wp-includes/class-wp-hook.php:324
Stack trace:
#0 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(false, Array)
#1 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#2 /wordpress/wp-settings.php(578): do_action('plugins_loaded')
#3 /wordpress/wp-config.php(102): require_once('/wordpress/wp-s...')
#4 /wordpress/wp-load.php(50): require_once('/wordpress/wp-c...')
#5 /internal/eval.php(3): require_once('/wordpress/wp-l...')
#6 {main}
  thrown in /wordpress/wp-includes/class-wp-hook.php on line 324
[02-Jul-2025 15:55:47 UTC] PHP Fatal error:  Uncaught TypeError: call_user_func_array(): Argument #1 ($callback) must be a valid callback, function "ass_init" not found or invalid function name in /wordpress/wp-includes/class-wp-hook.php:324
Stack trace:
#0 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(false, Array)
#1 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#2 /wordpress/wp-settings.php(578): do_action('plugins_loaded')
#3 /wordpress/wp-config.php(102): require_once('/wordpress/wp-s...')
#4 /wordpress/wp-load.php(50): require_once('/wordpress/wp-c...')
#5 /internal/eval.php(3): require_once('/wordpress/wp-l...')
#6 {main}
  thrown in /wordpress/wp-includes/class-wp-hook.php on line 324
[02-Jul-2025 15:58:22 UTC] PHP Notice:  Function _load_textdomain_just_in_time was called <strong>incorrectly</strong>. Translation loading for the <code>itls_logo_showcase_textdomain</code> domain was triggered too early. This is usually an indicator for some code in the plugin or theme running too early. Translations should be loaded at the <code>init</code> action or later. Please see <a href="https://developer.wordpress.org/advanced-administration/debug/debug-wordpress/">Debugging in WordPress</a> for more information. (This message was added in version 6.7.0.) in /wordpress/wp-includes/functions.php on line 6121
[02-Jul-2025 15:58:31 UTC] PHP Notice:  Function _load_textdomain_just_in_time was called <strong>incorrectly</strong>. Translation loading for the <code>itls_logo_showcase_textdomain</code> domain was triggered too early. This is usually an indicator for some code in the plugin or theme running too early. Translations should be loaded at the <code>init</code> action or later. Please see <a href="https://developer.wordpress.org/advanced-administration/debug/debug-wordpress/">Debugging in WordPress</a> for more information. (This message was added in version 6.7.0.) in /wordpress/wp-includes/functions.php on line 6121
[02-Jul-2025 15:58:41 UTC] PHP Notice:  Function _load_textdomain_just_in_time was called <strong>incorrectly</strong>. Translation loading for the <code>itls_logo_showcase_textdomain</code> domain was triggered too early. This is usually an indicator for some code in the plugin or theme running too early. Translations should be loaded at the <code>init</code> action or later. Please see <a href="https://developer.wordpress.org/advanced-administration/debug/debug-wordpress/">Debugging in WordPress</a> for more information. (This message was added in version 6.7.0.) in /wordpress/wp-includes/functions.php on line 6121
[02-Jul-2025 15:58:49 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php:82
Stack trace:
#0 /wordpress/wp-admin/includes/plugin.php(2387): include_once()
#1 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('affiliate-easel...')
#2 /internal/eval.php(20): activate_plugin('affiliate-easel...')
#3 {main}
  thrown in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php on line 82
[02-Jul-2025 15:58:57 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php:82
Stack trace:
#0 /wordpress/wp-admin/includes/plugin.php(2387): include_once()
#1 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('affiliate-easel...')
#2 /internal/eval.php(20): activate_plugin('affiliate-easel...')
#3 {main}
  thrown in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php on line 82
[02-Jul-2025 15:59:05 UTC] PHP Fatal error:  Uncaught Error: Call to undefined function create_function() in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php:82
Stack trace:
#0 /wordpress/wp-admin/includes/plugin.php(2387): include_once()
#1 /wordpress/wp-admin/includes/plugin.php(673): plugin_sandbox_scrape('affiliate-easel...')
#2 /internal/eval.php(20): activate_plugin('affiliate-easel...')
#3 {main}
  thrown in /wordpress/wp-content/plugins/affiliate-easel-for-amazon/affiliate-easel.php on line 82
[02-Jul-2025 15:59:44 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_orderid_orders ON wp_aieo_temp_orders_table  (OrderId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(160): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(157): aieo_create_temp_orders_table('wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_orderid_orders ON wp_aieo_temp_orders_table  (OrderId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_orders_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:44 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_productid_orders ON wp_aieo_temp_orders_table  (ProductId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(160): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(157): aieo_create_temp_orders_table('wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_productid_orders ON wp_aieo_temp_orders_table  (ProductId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_orders_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:44 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_parentproductid_orders ON wp_aieo_temp_orders_table  (ParentProductId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(160): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(157): aieo_create_temp_orders_table('wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_parentproductid_orders ON wp_aieo_temp_orders_table  (ParentProductId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_orders_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:44 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_brandid_orders ON wp_aieo_temp_orders_table  (BrandId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(160): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(157): aieo_create_temp_orders_table('wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_brandid_orders ON wp_aieo_temp_orders_table  (BrandId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_orders_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:44 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_eponymousid_orders ON wp_aieo_temp_orders_table  (EponymousID);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(160): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(157): aieo_create_temp_orders_table('wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_eponymousid_orders ON wp_aieo_temp_orders_table  (EponymousID); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_orders_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_productid_products ON wp_aieo_temp_product_catalogue_table  (ProductId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(316): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(158): aieo_create_temp_products_table('wp_aieo_temp_pr...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_productid_products ON wp_aieo_temp_product_catalogue_table  (ProductId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_products_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_parentproductid_products ON wp_aieo_temp_product_catalogue_table  (ParentProductId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(316): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(158): aieo_create_temp_products_table('wp_aieo_temp_pr...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_parentproductid_products ON wp_aieo_temp_product_catalogue_table  (ParentProductId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_products_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE INDEX aieo_idx_brandid_products ON wp_aieo_temp_product_catalogue_table  (BrandId);</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createIndex"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE INDEX ai...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE INDEX ai...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(316): WP_SQLite_DB->query('CREATE INDEX ai...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(158): aieo_create_temp_products_table('wp_aieo_temp_pr...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_temp_tables_activation_hook(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE INDEX aieo_idx_brandid_products ON wp_aieo_temp_product_catalogue_table  (BrandId); made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_temp_tables_activation_hook, aieo_create_temp_products_table, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_UpdateOrdersWithUnsold(OUT warning_message VARCHAR(255))
proc_label: BEGIN

  -- Check if the orders table is empty
  IF (SELECT COUNT(*) FROM wp_aieo_temp_orders_table) = 0 THEN
      SET warning_message = CONCAT('Warning: ', 'wp_aieo_temp_orders_table', ' is empty. The operation cannot proceed.');
      LEAVE proc_label;
  END IF;

  START TRANSACTION;

  -- INSERT Operation
  INSERT INTO wp_aieo_temp_orders_table 
  (OrderStatus, SKU, ProductId, ParentProductId, CategoryId, TagId, CurrentPrice, CurrentRegularPrice, Stock, ItemName, ParentItemName, Brand, CategoryName, TagName, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated)
  SELECT 
  st.OrderStatus, st.SKU, st.ProductId, st.ParentProductId, st.CategoryId, st.TagId, 
  st.CurrentPrice, st.CurrentRegularPrice, st.Stock, st.ItemName, st.ParentItemName, 
  st.Brand, st.CategoryName, st.TagName, st.ContentIntro, st.ContentIntroPlain, 
  st.ContentCreated, st.ContentLastUpdated
  FROM wp_aieo_temp_product_catalogue_table st
  LEFT JOIN wp_aieo_temp_orders_table atot ON atot.ProductId = st.ProductId
  WHERE atot.ProductId IS NULL;

  -- UPDATE Operation
  UPDATE wp_aieo_temp_orders_table atot
  JOIN wp_aieo_temp_product_catalogue_table st
  ON atot.ProductId = st.ProductId
  SET 
  atot.PPIdGraphUUID = st.PPIdGraphUUID,
  atot.ProdIdGraphUUID = st.ProdIdGraphUUID;

  COMMIT;

  -- Set the success message
  SET warning_message = ', and included the products that have no sales';

END;</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1155): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(170): aieo_create_sp_AIEO_UpdateOrdersWithUnsold('wp_', 'wp_aieo_temp_or...', 'wp_aieo_temp_pr...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_UpdateOrdersWithUnsold(OUT warning_message VARCHAR(255))
proc_label: BEGIN

  -- Check if the orders table is empty
  IF (SELECT COUNT(*) FROM wp_aieo_temp_orders_table) = 0 THEN
      SET warning_message = CONCAT('Warning: ', 'wp_aieo_temp_orders_table', ' is empty. The operation cannot proceed.');
      LEAVE proc_label;
  END IF;

  START TRANSACTION;

  -- INSERT Operation
  INSERT INTO wp_aieo_temp_orders_table 
  (OrderStatus, SKU, ProductId, ParentProductId, CategoryId, TagId, CurrentPrice, CurrentRegularPrice, Stock, ItemName, ParentItemName, Brand, CategoryName, TagName, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated)
  SELECT 
  st.OrderStatus, st.SKU, st.ProductId, st.ParentProductId, st.CategoryId, st.TagId, 
  st.CurrentPrice, st.CurrentRegularPrice, st.Stock, st.ItemName, st.ParentItemName, 
  st.Brand, st.CategoryName, st.TagName, st.ContentIntro, st.ContentIntroPlain, 
  st.ContentCreated, st.ContentLastUpdated
  FROM wp_aieo_temp_product_catalogue_table st
  LEFT JOIN wp_aieo_temp_orders_table atot ON atot.ProductId = st.ProductId
  WHERE atot.ProductId IS NULL;

  -- UPDATE Operation
  UPDATE wp_aieo_temp_orders_table atot
  JOIN wp_aieo_temp_product_catalogue_table st
  ON atot.ProductId = st.ProductId
  SET 
  atot.PPIdGraphUUID = st.PPIdGraphUUID,
  atot.ProdIdGraphUUID = st.ProdIdGraphUUID;

  COMMIT;

  -- Set the success message
  SET warning_message = ', and included the products that have no sales';

END; made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_UpdateOrdersWithUnsold, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_FindDifferences(IN in_table_name VARCHAR(255))
    DETERMINISTIC READS SQL DATA
    BEGIN
        -- Variables declaration
        DECLARE v_sql TEXT;
        DECLARE v_diff_part TEXT DEFAULT '';
        DECLARE v_word_count_parent INT DEFAULT 0;
        DECLARE v_word_count_item INT DEFAULT 0;
        DECLARE v_iter INT DEFAULT 1;
    
        -- Calculate word count of the ParentItemName for one record as an example.
        SET @v_sql = CONCAT('SELECT ROUND((CHAR_LENGTH(ParentItemName) - CHAR_LENGTH(REPLACE(ParentItemName, '' '', ''''))) / CHAR_LENGTH('' '') + 1) INTO @v_word_count_temp FROM ', in_table_name, ' LIMIT 1');
        PREPARE stmt1 FROM @v_sql;
        EXECUTE stmt1;
        DEALLOCATE PREPARE stmt1;
    
        -- Calculate word count of the ItemName for the same record.
        SET @v_sql = CONCAT('SELECT ROUND((CHAR_LENGTH(ItemName) - CHAR_LENGTH(REPLACE(ItemName, '' '', ''''))) / CHAR_LENGTH('' '') + 1) INTO @v_word_count_temp_item FROM ', in_table_name, ' LIMIT 1');
        PREPARE stmt2 FROM @v_sql;
        EXECUTE stmt2;
        DEALLOCATE PREPARE stmt2;
    
        SET v_word_count_parent = @v_word_count_temp;
        SET v_word_count_item = @v_word_count_temp_item;
    
        -- Construct the column of differing words from ParentItemName not in ItemName
        WHILE v_iter <= v_word_count_parent DO
            SET v_diff_part = CONCAT(v_diff_part, 'IF(ItemName NOT LIKE CONCAT(''%'', SUBSTRING_INDEX(SUBSTRING_INDEX(ParentItemName, '' '', ', v_iter, '), '' '', -1), ''%''), CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(ParentItemName, '' '', ', v_iter, '), '' '', -1), '' ''), '''')', ',');
            SET v_iter = v_iter + 1;
        END WHILE;
    
        SET v_iter = 1;
    
        -- Construct the column of differing words from ItemName not in ParentItemName
        WHILE v_iter <= v_word_count_item DO
            SET v_diff_part = CONCAT(v_diff_part, 'IF(ParentItemName NOT LIKE CONCAT(''%'', SUBSTRING_INDEX(SUBSTRING_INDEX(ItemName, '' '', ', v_iter, '), '' '', -1), ''%''), CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(ItemName, '' '', ', v_iter, '), '' '', -1), '' ''), '''')', ',');
            SET v_iter = v_iter + 1;
        END WHILE;
    
        -- Trim the last comma
        SET v_diff_part = LEFT(v_diff_part, CHAR_LENGTH(v_diff_part) - 1);
    
        -- Begin the construction of the dynamic SQL statement to update ItemNameDiff
        SET @v_sql = CONCAT('UPDATE ', in_table_name, ' SET ItemNameDiff = REPLACE(TRIM(CONCAT_WS('' '', ', v_diff_part, ')), ''  '', '' '')');
    
        -- Execute the dynamic SQL
        PREPARE dynamic_statement FROM @v_sql;
        EXECUTE dynamic_statement;
        DEALLOCATE PREPARE dynamic_statement;
    END;
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1442): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(171): aieo_create_sp_AIEO_FindDifferences('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_FindDifferences(IN in_table_name VARCHAR(255))
    DETERMINISTIC READS SQL DATA
    BEGIN
        -- Variables declaration
        DECLARE v_sql TEXT;
        DECLARE v_diff_part TEXT DEFAULT '';
        DECLARE v_word_count_parent INT DEFAULT 0;
        DECLARE v_word_count_item INT DEFAULT 0;
        DECLARE v_iter INT DEFAULT 1;
    
        -- Calculate word count of the ParentItemName for one record as an example.
        SET @v_sql = CONCAT('SELECT ROUND((CHAR_LENGTH(ParentItemName) - CHAR_LENGTH(REPLACE(ParentItemName, '' '', ''''))) / CHAR_LENGTH('' '') + 1) INTO @v_word_count_temp FROM ', in_table_name, ' LIMIT 1');
        PREPARE stmt1 FROM @v_sql;
        EXECUTE stmt1;
        DEALLOCATE PREPARE stmt1;
    
        -- Calculate word count of the ItemName for the same record.
        SET @v_sql = CONCAT('SELECT ROUND((CHAR_LENGTH(ItemName) - CHAR_LENGTH(REPLACE(ItemName, '' '', ''''))) / CHAR_LENGTH('' '') + 1) INTO @v_word_count_temp_item FROM ', in_table_name, ' LIMIT 1');
        PREPARE stmt2 FROM @v_sql;
        EXECUTE stmt2;
        DEALLOCATE PREPARE stmt2;
    
        SET v_word_count_parent = @v_word_count_temp;
        SET v_word_count_item = @v_word_count_temp_item;
    
        -- Construct the column of differing words from ParentItemName not in ItemName
        WHILE v_iter <= v_word_count_parent DO
            SET v_diff_part = CONCAT(v_diff_part, 'IF(ItemName NOT LIKE CONCAT(''%'', SUBSTRING_INDEX(SUBSTRING_INDEX(ParentItemName, '' '', ', v_iter, '), '' '', -1), ''%''), CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(ParentItemName, '' '', ', v_iter, '), '' '', -1), '' ''), '''')', ',');
            SET v_iter = v_iter + 1;
        END WHILE;
    
        SET v_iter = 1;
    
        -- Construct the column of differing words from ItemName not in ParentItemName
        WHILE v_iter <= v_word_count_item DO
            SET v_diff_part = CONCAT(v_diff_part, 'IF(ParentItemName NOT LIKE CONCAT(''%'', SUBSTRING_INDEX(SUBSTRING_INDEX(ItemName, '' '', ', v_iter, '), '' '', -1), ''%''), CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(ItemName, '' '', ', v_iter, '), '' '', -1), '' ''), '''')', ',');
            SET v_iter = v_iter + 1;
        END WHILE;
    
        -- Trim the last comma
        SET v_diff_part = LEFT(v_diff_part, CHAR_LENGTH(v_diff_part) - 1);
    
        -- Begin the construction of the dynamic SQL statement to update ItemNameDiff
        SET @v_sql = CONCAT('UPDATE ', in_table_name, ' SET ItemNameDiff = REPLACE(TRIM(CONCAT_WS('' '', ', v_diff_part, ')), ''  '', '' '')');
    
        -- Execute the dynamic SQL
        PREPARE dynamic_statement FROM @v_sql;
        EXECUTE dynamic_statement;
        DEALLOCATE PREPARE dynamic_statement;
    END;
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_FindDifferences, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:45 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_Create_Product_Catalogue_HPOS(
    IN _price_sql_choice INT, 
    IN _text_sql_choice INT,
    IN _full_text_sql_choice INT
     
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_product_catalogue_table;
  INSERT INTO wp_aieo_temp_product_catalogue_table 
  (OrderId, OrderStatus, SKU, ProductId, ParentProductId, CategoryId, TagId, Stock, CurrentPrice, CurrentRegularPrice, ItemName, ParentItemName, 
  ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
  CategoryName, TagName, Seasonality, ProdIdGraphUUID, PPIdGraphUUID)  
  SELECT DISTINCT
    '0' as OrderId, 
    'unsold' as OrderStatus,
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(psku.meta_value, '')  END) as SKU,
    pmp.ID as ProductId, 
    CASE 
        WHEN pmp.post_type = 'product_variation' THEN pmp.post_parent 
        ELSE pmp.ID 
    END as ParentProductId,
    COALESCE(pc.category_ids, '') as CategoryId, 
    COALESCE(pt.tag_ids, '') AS TagId,
    COALESCE(pstock.meta_value, '') as Stock,
( 
  CASE 
  WHEN _price_sql_choice = 0 THEN '' 
  ELSE 
    CASE 
      WHEN pm_price.meta_value IS NOT NULL AND pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
      ELSE NULL 
    END 
END
) AS CurrentPrice,

(
CASE 
  WHEN _price_sql_choice = 0 THEN '' 
  ELSE 
    CASE 
      WHEN pm_regular_price.meta_value IS NOT NULL AND pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
      ELSE NULL 
    END
END
) AS CurrentRegularPrice,
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE pmp.post_title END) as ItemName,
      (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(parent.post_title, pmp.post_title) END) as ParentItemName,
    '1' as ProfitabilityIndex, 
    '' as Brand,
      (
      CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE COALESCE(parent.post_content, pmp.post_content) END) as ContentIntro,
      (
      CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE COALESCE(parent.post_content, pmp.post_content) END) as ContentIntroPlain,
     
    pmp.post_date_gmt AS ContentCreated,
    pmp.post_modified_gmt AS ContentLastUpdated, 
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE COALESCE(pc.category_names, '') END ) AS CategoryName,
      (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(pt.tag_names, '') END ) AS TagName, 
      '0' as Seasonality,
        UUID() as ProdIdGraphUUID,  -- UUID generation for ProductId
        (CASE 
            WHEN pmp.post_type = 'product_variation' THEN (SELECT UUID() FROM wp_posts WHERE ID = pmp.post_parent LIMIT 1) 
            ELSE UUID()
        END) as PPIdGraphUUID  -- UUID generation for ParentProductId
    FROM 
(
    SELECT DISTINCT
        pmp.ID as ProductId,
        CASE 
            WHEN pmp.post_type = 'product_variation' THEN pmp.post_parent 
            ELSE pmp.ID 
        END as ParentProductId
    FROM 
        wp_posts pmp
    WHERE 
        pmp.post_type IN ('product', 'product_variation')
) AS derivedTable

JOIN wp_posts pmp ON derivedTable.ProductId = pmp.ID
LEFT JOIN wp_posts parent ON pmp.post_parent = parent.ID

LEFT JOIN wp_postmeta AS psku 
ON psku.post_id = CASE 
                     WHEN pmp.post_type = 'product_variation' THEN pmp.ID 
                     ELSE parent.ID 
                  END 
AND psku.meta_key = '_sku'

-- Join for Price
LEFT JOIN wp_postmeta AS pm_price 
ON pmp.ID = pm_price.post_id 
AND pm_price.meta_key = '_price'

-- Join for Regular Price
LEFT JOIN wp_postmeta AS pm_regular_price 
ON pmp.ID = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'


-- Join for Stock
LEFT JOIN wp_postmeta AS pstock 
ON pmp.ID = pstock.post_id 
AND pstock.meta_key = '_stock'


LEFT JOIN (
SELECT 
    tr.object_id AS product_id, 
    GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS category_ids, 
    GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS category_names 
FROM 
   wp_term_relationships tr 
JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_cat' 
JOIN wp_terms t ON tt.term_id = t.term_id 
GROUP BY 
    tr.object_id
) AS pc ON (pc.product_id = pmp.ID OR pc.product_id = parent.ID)

LEFT JOIN (
SELECT 
    tr.object_id AS product_id, 
    GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS tag_ids, 
    GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS tag_names 
FROM 
   wp_term_relationships tr 
JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_tag' 
JOIN wp_terms t ON tt.term_id = t.term_id 
GROUP BY 
    tr.object_id
) AS pt ON (pt.product_id = pmp.ID OR pt.product_id = parent.ID)
-- Now, move the WHERE condition here:
WHERE NOT (
  pmp.post_type = 'product' 
  AND derivedTable.ProductId = derivedTable.ParentProductId
  AND EXISTS (
    SELECT 1 FROM wp_posts pmp_var 
    WHERE pmp_var.post_parent = derivedTable.ParentProductId 
    AND pmp_var.post_type = 'product_variation'
  )
)
ORDER BY pmp.ID;
      END;       
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1597): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(172): aieo_create_sp_AIEO_Create_Product_Catalogue_HPOS('wp_', 'wp_aieo_temp_pr...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_Create_Product_Catalogue_HPOS(
    IN _price_sql_choice INT, 
    IN _text_sql_choice INT,
    IN _full_text_sql_choice INT
     
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_product_catalogue_table;
  INSERT INTO wp_aieo_temp_product_catalogue_table 
  (OrderId, OrderStatus, SKU, ProductId, ParentProductId, CategoryId, TagId, Stock, CurrentPrice, CurrentRegularPrice, ItemName, ParentItemName, 
  ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
  CategoryName, TagName, Seasonality, ProdIdGraphUUID, PPIdGraphUUID)  
  SELECT DISTINCT
    '0' as OrderId, 
    'unsold' as OrderStatus,
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(psku.meta_value, '')  END) as SKU,
    pmp.ID as ProductId, 
    CASE 
        WHEN pmp.post_type = 'product_variation' THEN pmp.post_parent 
        ELSE pmp.ID 
    END as ParentProductId,
    COALESCE(pc.category_ids, '') as CategoryId, 
    COALESCE(pt.tag_ids, '') AS TagId,
    COALESCE(pstock.meta_value, '') as Stock,
( 
  CASE 
  WHEN _price_sql_choice = 0 THEN '' 
  ELSE 
    CASE 
      WHEN pm_price.meta_value IS NOT NULL AND pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
      ELSE NULL 
    END 
END
) AS CurrentPrice,

(
CASE 
  WHEN _price_sql_choice = 0 THEN '' 
  ELSE 
    CASE 
      WHEN pm_regular_price.meta_value IS NOT NULL AND pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
      ELSE NULL 
    END
END
) AS CurrentRegularPrice,
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE pmp.post_title END) as ItemName,
      (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(parent.post_title, pmp.post_title) END) as ParentItemName,
    '1' as ProfitabilityIndex, 
    '' as Brand,
      (
      CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE COALESCE(parent.post_content, pmp.post_content) END) as ContentIntro,
      (
      CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE COALESCE(parent.post_content, pmp.post_content) END) as ContentIntroPlain,
     
    pmp.post_date_gmt AS ContentCreated,
    pmp.post_modified_gmt AS ContentLastUpdated, 
    (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE COALESCE(pc.category_names, '') END ) AS CategoryName,
      (
      CASE WHEN _text_sql_choice = 0 THEN '' ELSE  COALESCE(pt.tag_names, '') END ) AS TagName, 
      '0' as Seasonality,
        UUID() as ProdIdGraphUUID,  -- UUID generation for ProductId
        (CASE 
            WHEN pmp.post_type = 'product_variation' THEN (SELECT UUID() FROM wp_posts WHERE ID = pmp.post_parent LIMIT 1) 
            ELSE UUID()
        END) as PPIdGraphUUID  -- UUID generation for ParentProductId
    FROM 
(
    SELECT DISTINCT
        pmp.ID as ProductId,
        CASE 
            WHEN pmp.post_type = 'product_variation' THEN pmp.post_parent 
            ELSE pmp.ID 
        END as ParentProductId
    FROM 
        wp_posts pmp
    WHERE 
        pmp.post_type IN ('product', 'product_variation')
) AS derivedTable

JOIN wp_posts pmp ON derivedTable.ProductId = pmp.ID
LEFT JOIN wp_posts parent ON pmp.post_parent = parent.ID

LEFT JOIN wp_postmeta AS psku 
ON psku.post_id = CASE 
                     WHEN pmp.post_type = 'product_variation' THEN pmp.ID 
                     ELSE parent.ID 
                  END 
AND psku.meta_key = '_sku'

-- Join for Price
LEFT JOIN wp_postmeta AS pm_price 
ON pmp.ID = pm_price.post_id 
AND pm_price.meta_key = '_price'

-- Join for Regular Price
LEFT JOIN wp_postmeta AS pm_regular_price 
ON pmp.ID = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'


-- Join for Stock
LEFT JOIN wp_postmeta AS pstock 
ON pmp.ID = pstock.post_id 
AND pstock.meta_key = '_stock'


LEFT JOIN (
SELECT 
    tr.object_id AS product_id, 
    GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS category_ids, 
    GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS category_names 
FROM 
   wp_term_relationships tr 
JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_cat' 
JOIN wp_terms t ON tt.term_id = t.term_id 
GROUP BY 
    tr.object_id
) AS pc ON (pc.product_id = pmp.ID OR pc.product_id = parent.ID)

LEFT JOIN (
SELECT 
    tr.object_id AS product_id, 
    GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS tag_ids, 
    GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS tag_names 
FROM 
   wp_term_relationships tr 
JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_tag' 
JOIN wp_terms t ON tt.term_id = t.term_id 
GROUP BY 
    tr.object_id
) AS pt ON (pt.product_id = pmp.ID OR pt.product_id = parent.ID)
-- Now, move the WHERE condition here:
WHERE NOT (
  pmp.post_type = 'product' 
  AND derivedTable.ProductId = derivedTable.ParentProductId
  AND EXISTS (
    SELECT 1 FROM wp_posts pmp_var 
    WHERE pmp_var.post_parent = derivedTable.ParentProductId 
    AND pmp_var.post_type = 'product_variation'
  )
)
ORDER BY pmp.ID;
      END;       
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_Create_Product_Catalogue_HPOS, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_Export_Orders_HPOS(
    IN _price_sql_choice INT, 
    IN _text_sql_choice INT, 
    IN _full_text_sql_choice INT,
    IN _eponymous_sql_choice INT, 
    IN _seasonality_sql_choice INT, 
    IN _order_id INT, 
    IN _max_records INT
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_orders_table;
  INSERT INTO wp_aieo_temp_orders_table
  (OrderIdGraphUUID, OrderItemIdGraphUUID, PPIdGraphUUID, ProdIdGraphUUID, EpoIdGraphUUID, O_PP_GraphUUID,O_Prod_GraphUUID, 
  O_Epo_GraphUUID, PP_Epo_GraphUUID, Prod_Epo_GraphUUID, OrderId, OrderStatus, SKU,  ProductId, ParentProductId, CategoryId, TagId, OrderDate, PrimaryQty, ItemSequence, Stock, OrderSize, 
    JourneyLinearWeight, AnonymousWeight, Price, LineValue, OrderItemsTotal, ValueLinearWeight, CurrentPrice, CurrentRegularPrice, ItemName,  ParentItemName, ItemNameDiff, 
    ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
    CategoryName, TagName, EponymousID, Seasonality)
    SELECT 
    UUID() AS OrderIdGraphUUID, 
    MD5(CONCAT(o.id)) AS OrderItemIdGraphUUID,
    MD5(CONCAT(COALESCE(oimp.meta_value, ''))) AS PPIdGraphUUID,
    MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''))) AS ProdIdGraphUUID,
    CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(o.customer_id))
END AS EpoIdGraphUUID,

    MD5(CONCAT(COALESCE(oimp.meta_value, ''), o.id)) AS O_PP_GraphUUID,
    MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''), o.id)) AS O_Prod_GraphUUID,
    
    CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(o.id, o.customer_id))
END AS O_Epo_GraphUUID,

CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(COALESCE(oimp.meta_value, ''), o.customer_id))
END AS PP_Epo_GraphUUID,

CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''), o.customer_id))
END AS Prod_Epo_GraphUUID,
    
    o.id as OrderId, 
      o.status as OrderStatus, 
    CASE WHEN _text_sql_choice = 0 THEN '' ELSE COALESCE(psku.meta_value, '') END AS SKU, 
      COALESCE(
          CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''
      ) AS ProductId, 
      COALESCE(oimp.meta_value, '') AS ParentProductId,
      COALESCE(pc.category_ids, '') as CategoryId, 
      COALESCE(pt.tag_ids, '') AS TagId, 
      o.date_created_gmt as OrderDate, 
      COALESCE(CONVERT(oimq.meta_value, decimal(3, 0)), '') as PrimaryQty, 
      ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY oi.order_item_id) as ItemSequence, 
      COALESCE(pstock.meta_value, '') as Stock,
      os.OrderSize, 
      ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY oi.order_item_id) / os.OrderSize as JourneyLinearWeight, 
      CASE WHEN _eponymous_sql_choice = 0 THEN '0' ELSE '1' END AS AnonymousWeight,
      (CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(
              
                oims.meta_value 
              / oimq.meta_value,
              decimal(5, 2)
          ) END ) as Price, 
      (CASE WHEN _price_sql_choice = 0 THEN '' ELSE  convert(
              oims.meta_value, 
              decimal(7, 2)
          
          ) END ) as LineValue, 
          
          ( CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(o.total_amount , 
          decimal(7, 2)) END )   as OrderItemsTotal,
          ( CASE WHEN _price_sql_choice = 0 THEN '' ELSE 
          convert(oims.meta_value / o.total_amount , 
              decimal(7, 2)) END )   as ValueLinearWeight, 
              (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END 
      ) 
  END
  ) AS CurrentPrice,  
  (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END
      ) 
  END
) AS CurrentRegularPrice,
          (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE 
          
            oi.order_item_name END) as ItemName, 
            (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE  (
              CASE WHEN oimpv.meta_value = 0 THEN oi.order_item_name ELSE pmp.post_title END
            ) END ) as ParentItemName, 
            (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE '' END ) as ItemNameDiff, 
  
  '1' as ProfitabilityIndex,
  '' AS Brand,
       (
            CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE     
            (
              CASE WHEN oimpv.meta_value = 0 THEN pmp.post_content ELSE (
                SELECT 
                  parent.post_content 
                FROM 
                  wp_posts parent 
                WHERE 
                  parent.ID = oimp.meta_value
              ) END
            ) END)  as ContentIntro, 
            (
            CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE     
            (
              CASE WHEN oimpv.meta_value = 0 THEN pmp.post_content ELSE (
                SELECT 
                  parent.post_content 
                FROM 
                  wp_posts parent 
                WHERE 
                  parent.ID = oimp.meta_value
              ) END
            ) END) as ContentIntroPlain,
          COALESCE(pmp.post_date_gmt, '2000-01-01 00:00:00') as ContentCreated, 
          COALESCE(pmp.post_modified_gmt, '2000-01-01 00:00:00') as ContentLastUpdated,
       (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE     
       
          COALESCE(pc.category_names, '') END ) AS CategoryName, 
  (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE     
               COALESCE(pt.tag_names, '') END ) AS TagName, 
           (CASE WHEN _eponymous_sql_choice = 0 THEN '0' ELSE  o.customer_id END)  AS EponymousID, 
   
          (
            CASE WHEN _seasonality_sql_choice = 0 THEN '0' ELSE     
       '1' END) AS Seasonality
      FROM 
      wp_woocommerce_order_items oi 
      JOIN wp_wc_orders o 
          ON o.id = oi.order_id 
      JOIN wp_woocommerce_order_itemmeta oimp 
          ON oi.order_item_id = oimp.order_item_id AND oimp.meta_key = '_product_id' 
      LEFT JOIN wp_woocommerce_order_itemmeta oimpv 
          ON oi.order_item_id = oimpv.order_item_id AND oimpv.meta_key = '_variation_id' 
      LEFT JOIN wp_woocommerce_order_itemmeta oimq 
          ON oi.order_item_id = oimq.order_item_id AND oimq.meta_key = '_qty' 
    LEFT JOIN wp_woocommerce_order_itemmeta oims on oi.order_item_id = oims.order_item_id 
  and oims.meta_key = '_line_subtotal'



  
   LEFT JOIN wp_wc_order_operational_data ood 
          ON ood.order_id = o.id 
      JOIN wp_wc_order_addresses oba 
          ON oba.order_id = o.id AND oba.address_type = 'billing' 
          LEFT JOIN wp_posts pmp 
    ON pmp.ID = oimp.meta_value 


    LEFT JOIN wp_postmeta AS pm_price 
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pm_price.post_id 
AND pm_price.meta_key = '_price'

LEFT JOIN wp_postmeta AS pm_regular_price 
ON (
    CASE 
        WHEN oimpv.meta_value IS NOT NULL AND oimpv.meta_value != '0' THEN oimpv.meta_value
        ELSE oimp.meta_value
    END
) = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'

LEFT JOIN wp_postmeta pstock
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pstock.post_id 
AND pstock.meta_key = '_stock'



  
  LEFT JOIN wp_postmeta AS psku 
      ON psku.post_id = CASE WHEN oimpv.meta_value != '0' THEN oimpv.meta_value ELSE pmp.ID END AND psku.meta_key = '_sku'
   
      LEFT JOIN (
        SELECT 
            oi.order_id, 
            COUNT(*) AS OrderSize 
        FROM 
            wp_woocommerce_order_items oi 
        WHERE 
            oi.order_item_type = 'line_item'
        GROUP BY 
            oi.order_id
    ) AS os ON o.ID = os.order_id
   
   
    LEFT JOIN (
    SELECT 
        tr.object_id AS product_id, 
        GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS category_ids,
        GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS category_names  -- Include category names
    FROM 
    wp_term_relationships tr 
        JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_cat'
        JOIN wp_terms t ON tt.term_id = t.term_id 
    GROUP BY 
        tr.object_id
) AS pc ON pc.product_id = oimp.meta_value
    LEFT JOIN (
        SELECT 
            tr.object_id AS product_id, 
            GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS tag_ids,
            GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS tag_names 
        FROM 
            wp_term_relationships tr 
            JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_tag'
            JOIN wp_terms t ON tt.term_id = t.term_id 
        GROUP BY 
            tr.object_id
    ) AS pt ON pt.product_id = oimp.meta_value
  WHERE 
      oi.order_item_type = 'line_item' 
      AND oi.order_id >= _order_id 
      LIMIT _max_records;

      END;       
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1858): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(173): aieo_create_sp_AIEO_Export_Orders_HPOS('wp_', 'wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_Export_Orders_HPOS(
    IN _price_sql_choice INT, 
    IN _text_sql_choice INT, 
    IN _full_text_sql_choice INT,
    IN _eponymous_sql_choice INT, 
    IN _seasonality_sql_choice INT, 
    IN _order_id INT, 
    IN _max_records INT
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_orders_table;
  INSERT INTO wp_aieo_temp_orders_table
  (OrderIdGraphUUID, OrderItemIdGraphUUID, PPIdGraphUUID, ProdIdGraphUUID, EpoIdGraphUUID, O_PP_GraphUUID,O_Prod_GraphUUID, 
  O_Epo_GraphUUID, PP_Epo_GraphUUID, Prod_Epo_GraphUUID, OrderId, OrderStatus, SKU,  ProductId, ParentProductId, CategoryId, TagId, OrderDate, PrimaryQty, ItemSequence, Stock, OrderSize, 
    JourneyLinearWeight, AnonymousWeight, Price, LineValue, OrderItemsTotal, ValueLinearWeight, CurrentPrice, CurrentRegularPrice, ItemName,  ParentItemName, ItemNameDiff, 
    ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
    CategoryName, TagName, EponymousID, Seasonality)
    SELECT 
    UUID() AS OrderIdGraphUUID, 
    MD5(CONCAT(o.id)) AS OrderItemIdGraphUUID,
    MD5(CONCAT(COALESCE(oimp.meta_value, ''))) AS PPIdGraphUUID,
    MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''))) AS ProdIdGraphUUID,
    CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(o.customer_id))
END AS EpoIdGraphUUID,

    MD5(CONCAT(COALESCE(oimp.meta_value, ''), o.id)) AS O_PP_GraphUUID,
    MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''), o.id)) AS O_Prod_GraphUUID,
    
    CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(o.id, o.customer_id))
END AS O_Epo_GraphUUID,

CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(COALESCE(oimp.meta_value, ''), o.customer_id))
END AS PP_Epo_GraphUUID,

CASE 
    WHEN _eponymous_sql_choice = 0 OR o.customer_id = 0 THEN NULL
    ELSE MD5(CONCAT(COALESCE(CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''), o.customer_id))
END AS Prod_Epo_GraphUUID,
    
    o.id as OrderId, 
      o.status as OrderStatus, 
    CASE WHEN _text_sql_choice = 0 THEN '' ELSE COALESCE(psku.meta_value, '') END AS SKU, 
      COALESCE(
          CASE WHEN oimpv.meta_value = 0 THEN oimp.meta_value ELSE oimpv.meta_value END, ''
      ) AS ProductId, 
      COALESCE(oimp.meta_value, '') AS ParentProductId,
      COALESCE(pc.category_ids, '') as CategoryId, 
      COALESCE(pt.tag_ids, '') AS TagId, 
      o.date_created_gmt as OrderDate, 
      COALESCE(CONVERT(oimq.meta_value, decimal(3, 0)), '') as PrimaryQty, 
      ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY oi.order_item_id) as ItemSequence, 
      COALESCE(pstock.meta_value, '') as Stock,
      os.OrderSize, 
      ROW_NUMBER() OVER (PARTITION BY o.id ORDER BY oi.order_item_id) / os.OrderSize as JourneyLinearWeight, 
      CASE WHEN _eponymous_sql_choice = 0 THEN '0' ELSE '1' END AS AnonymousWeight,
      (CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(
              
                oims.meta_value 
              / oimq.meta_value,
              decimal(5, 2)
          ) END ) as Price, 
      (CASE WHEN _price_sql_choice = 0 THEN '' ELSE  convert(
              oims.meta_value, 
              decimal(7, 2)
          
          ) END ) as LineValue, 
          
          ( CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(o.total_amount , 
          decimal(7, 2)) END )   as OrderItemsTotal,
          ( CASE WHEN _price_sql_choice = 0 THEN '' ELSE 
          convert(oims.meta_value / o.total_amount , 
              decimal(7, 2)) END )   as ValueLinearWeight, 
              (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END 
      ) 
  END
  ) AS CurrentPrice,  
  (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END
      ) 
  END
) AS CurrentRegularPrice,
          (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE 
          
            oi.order_item_name END) as ItemName, 
            (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE  (
              CASE WHEN oimpv.meta_value = 0 THEN oi.order_item_name ELSE pmp.post_title END
            ) END ) as ParentItemName, 
            (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE '' END ) as ItemNameDiff, 
  
  '1' as ProfitabilityIndex,
  '' AS Brand,
       (
            CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE     
            (
              CASE WHEN oimpv.meta_value = 0 THEN pmp.post_content ELSE (
                SELECT 
                  parent.post_content 
                FROM 
                  wp_posts parent 
                WHERE 
                  parent.ID = oimp.meta_value
              ) END
            ) END)  as ContentIntro, 
            (
            CASE WHEN _full_text_sql_choice = 0 THEN '' ELSE     
            (
              CASE WHEN oimpv.meta_value = 0 THEN pmp.post_content ELSE (
                SELECT 
                  parent.post_content 
                FROM 
                  wp_posts parent 
                WHERE 
                  parent.ID = oimp.meta_value
              ) END
            ) END) as ContentIntroPlain,
          COALESCE(pmp.post_date_gmt, '2000-01-01 00:00:00') as ContentCreated, 
          COALESCE(pmp.post_modified_gmt, '2000-01-01 00:00:00') as ContentLastUpdated,
       (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE     
       
          COALESCE(pc.category_names, '') END ) AS CategoryName, 
  (
            CASE WHEN _text_sql_choice = 0 THEN '' ELSE     
               COALESCE(pt.tag_names, '') END ) AS TagName, 
           (CASE WHEN _eponymous_sql_choice = 0 THEN '0' ELSE  o.customer_id END)  AS EponymousID, 
   
          (
            CASE WHEN _seasonality_sql_choice = 0 THEN '0' ELSE     
       '1' END) AS Seasonality
      FROM 
      wp_woocommerce_order_items oi 
      JOIN wp_wc_orders o 
          ON o.id = oi.order_id 
      JOIN wp_woocommerce_order_itemmeta oimp 
          ON oi.order_item_id = oimp.order_item_id AND oimp.meta_key = '_product_id' 
      LEFT JOIN wp_woocommerce_order_itemmeta oimpv 
          ON oi.order_item_id = oimpv.order_item_id AND oimpv.meta_key = '_variation_id' 
      LEFT JOIN wp_woocommerce_order_itemmeta oimq 
          ON oi.order_item_id = oimq.order_item_id AND oimq.meta_key = '_qty' 
    LEFT JOIN wp_woocommerce_order_itemmeta oims on oi.order_item_id = oims.order_item_id 
  and oims.meta_key = '_line_subtotal'



  
   LEFT JOIN wp_wc_order_operational_data ood 
          ON ood.order_id = o.id 
      JOIN wp_wc_order_addresses oba 
          ON oba.order_id = o.id AND oba.address_type = 'billing' 
          LEFT JOIN wp_posts pmp 
    ON pmp.ID = oimp.meta_value 


    LEFT JOIN wp_postmeta AS pm_price 
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pm_price.post_id 
AND pm_price.meta_key = '_price'

LEFT JOIN wp_postmeta AS pm_regular_price 
ON (
    CASE 
        WHEN oimpv.meta_value IS NOT NULL AND oimpv.meta_value != '0' THEN oimpv.meta_value
        ELSE oimp.meta_value
    END
) = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'

LEFT JOIN wp_postmeta pstock
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pstock.post_id 
AND pstock.meta_key = '_stock'



  
  LEFT JOIN wp_postmeta AS psku 
      ON psku.post_id = CASE WHEN oimpv.meta_value != '0' THEN oimpv.meta_value ELSE pmp.ID END AND psku.meta_key = '_sku'
   
      LEFT JOIN (
        SELECT 
            oi.order_id, 
            COUNT(*) AS OrderSize 
        FROM 
            wp_woocommerce_order_items oi 
        WHERE 
            oi.order_item_type = 'line_item'
        GROUP BY 
            oi.order_id
    ) AS os ON o.ID = os.order_id
   
   
    LEFT JOIN (
    SELECT 
        tr.object_id AS product_id, 
        GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS category_ids,
        GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS category_names  -- Include category names
    FROM 
    wp_term_relationships tr 
        JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_cat'
        JOIN wp_terms t ON tt.term_id = t.term_id 
    GROUP BY 
        tr.object_id
) AS pc ON pc.product_id = oimp.meta_value
    LEFT JOIN (
        SELECT 
            tr.object_id AS product_id, 
            GROUP_CONCAT(t.term_id ORDER BY t.term_id ASC) AS tag_ids,
            GROUP_CONCAT(t.name ORDER BY t.term_id ASC) AS tag_names 
        FROM 
            wp_term_relationships tr 
            JOIN wp_term_taxonomy tt ON tr.term_taxonomy_id = tt.term_taxonomy_id AND tt.taxonomy = 'product_tag'
            JOIN wp_terms t ON tt.term_id = t.term_id 
        GROUP BY 
            tr.object_id
    ) AS pt ON pt.product_id = oimp.meta_value
  WHERE 
      oi.order_item_type = 'line_item' 
      AND oi.order_id >= _order_id 
      LIMIT _max_records;

      END;       
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_Export_Orders_HPOS, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_Export_Orders_non_HPOS(
        IN _price_sql_choice INT, 
        IN _text_sql_choice INT, 
        IN _full_text_sql_choice INT,
        IN _eponymous_sql_choice INT, 
        IN _seasonality_sql_choice INT, 
        IN _order_id INT, 
        IN _max_records INT
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_orders_table;
  INSERT INTO wp_aieo_temp_orders_table
(OrderId, OrderStatus, SKU,  ProductId, ParentProductId, CategoryId, TagId, OrderDate, PrimaryQty, ItemSequence, Stock, OrderSize, 
JourneyLinearWeight, AnonymousWeight, Price, LineValue, OrderItemsTotal, ValueLinearWeight, CurrentPrice, CurrentRegularPrice, ItemName,  ParentItemName, ItemNameDiff, 
ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
CategoryName, TagName, EponymousID, Seasonality)

SELECT  o.id as OrderId,
o.post_status as OrderStatus,
case 
when _text_sql_choice = 0
then ''
else COALESCE(psku.meta_value, '')
end as SKU,
COALESCE(case 
when oimpv.meta_value = 0
then oimp.meta_value
else oimpv.meta_value
end, '') as ProductId,
COALESCE(oimp.meta_value, '') as ParentProductId,
COALESCE(pc.category_ids, '') as CategoryId,
COALESCE(pt.tag_ids, '') as TagId,
o.post_date_gmt as OrderDate,
COALESCE(CONVERT(oimq.meta_value, decimal(3, 0)), '') as PrimaryQty,
ROW_NUMBER() over (
partition by o.id order by oi.order_item_id
) as ItemSequence,
COALESCE(pstock.meta_value, '') as Stock,
os.OrderSize,
ROW_NUMBER() over (
partition by o.id order by oi.order_item_id
) / os.OrderSize as JourneyLinearWeight,
(
case 
when _eponymous_sql_choice = 0
then '0'
else '1'
end
) as AnonymousWeight,
(
case 
when _price_sql_choice = 0
then ''
else convert(oims.meta_value / oimq.meta_value, decimal(5, 2))
end
) as Price,
(
case 
when _price_sql_choice = 0
then ''
else convert(oims.meta_value, decimal(7, 2))
end
) as LineValue,
( CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(pmot.meta_value , 
decimal(7, 2)) END ) as OrderItemsTotal,
(
case 
when _price_sql_choice = 0
then ''
else (
case 
when pmot.meta_value = 0
or pmot.meta_value is null
then '0'
else convert(oims.meta_value / pmot.meta_value, decimal(7, 2))
end
)
end
) as ValueLinearWeight,
(
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END 
      ) 
  END
  ) AS CurrentPrice,
  
  (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END
      ) 
  END
) AS CurrentRegularPrice,
(
case 
when _text_sql_choice = 0
then ''
else oi.order_item_name
end
) as ItemName,
(
case 
when _text_sql_choice = 0
then ''
else (
case 
when oimpv.meta_value = 0
then oi.order_item_name
else pmp.post_title
end
)
end
) as ParentItemName,
'' as ItemNameDiff,


  '1' as ProfitabilityIndex,
'' as Brand,
(
case 
when _full_text_sql_choice = 0
then ''
else (
case 
when oimpv.meta_value = 0
then pmp.post_content
else (
select parent.post_content
from wp_posts parent
where parent.ID = oimp.meta_value
)
end
)
end
) as ContentIntro,
(
    case 
    when _full_text_sql_choice = 0
    then ''
    else (
    case 
    when oimpv.meta_value = 0
    then pmp.post_content
    else (
    select parent.post_content
    from wp_posts parent
    where parent.ID = oimp.meta_value
    )
    end
    )
    end
    ) as ContentIntroPlain,
COALESCE(pmp.post_date_gmt, '2000-01-01 00:00:00') as ContentCreated,
COALESCE(pmp.post_modified_gmt, '2000-01-01 00:00:00') as ContentLastUpdated,
(
case 
when _text_sql_choice = 0
then ''
else COALESCE(pc.category_names, '')
end
) as CategoryName,

(
case 
when _text_sql_choice = 0
then ''
else COALESCE(pt.tag_names, '')
end
) as TagName,
(
case 
when _eponymous_sql_choice = 0
then '0'
else pmu.meta_value
end
) as EponymousID,
(
case 
when _seasonality_sql_choice = 0
then '0'
else '1'
end
) as Seasonality
FROM wp_woocommerce_order_items oi

INNER JOIN wp_posts o
ON o.ID = oi.order_id
AND o.post_type = 'shop_order'

INNER JOIN wp_woocommerce_order_itemmeta oimp
ON oi.order_item_id = oimp.order_item_id
AND oimp.meta_key = '_product_id'

LEFT JOIN wp_woocommerce_order_itemmeta oimpv
ON oi.order_item_id = oimpv.order_item_id
AND oimpv.meta_key = '_variation_id'

LEFT JOIN wp_woocommerce_order_itemmeta oimq
ON oi.order_item_id = oimq.order_item_id
AND oimq.meta_key = '_qty'

LEFT JOIN wp_woocommerce_order_itemmeta oims
ON oi.order_item_id = oims.order_item_id
AND oims.meta_key = '_line_subtotal'

INNER JOIN wp_postmeta as pmu
ON pmu.post_id = o.ID
AND pmu.meta_key = '_customer_user'

INNER JOIN wp_postmeta as pmot
ON pmot.post_id = o.ID
AND pmot.meta_key = '_order_total'

LEFT JOIN wp_posts pmp
ON pmp.ID = oimp.meta_value

LEFT JOIN wp_postmeta as psku
ON psku.post_id = CASE 
    WHEN oimpv.meta_value != '0' THEN oimpv.meta_value
    ELSE pmp.ID
END
AND psku.meta_key = '_sku'
LEFT JOIN wp_postmeta AS pm_price 
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pm_price.post_id 
AND pm_price.meta_key = '_price'

LEFT JOIN wp_postmeta AS pm_regular_price 
ON (
    CASE 
        WHEN oimpv.meta_value IS NOT NULL AND oimpv.meta_value != '0' THEN oimpv.meta_value
        ELSE oimp.meta_value
    END
) = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'

LEFT JOIN wp_postmeta pstock
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pstock.post_id 
AND pstock.meta_key = '_stock'

left join (
select oi.order_id,
COUNT(distinct oimp.meta_value) as OrderSize
from wp_woocommerce_order_items oi
inner join wp_woocommerce_order_itemmeta oimp
on oi.order_item_id = oimp.order_item_id
and oimp.meta_key = '_product_id'
group by oi.order_id
) as os
on o.ID = os.order_id
left join (
select tr.object_id as product_id,
GROUP_CONCAT(t.term_id order by t.term_id asc) as category_ids,
GROUP_CONCAT(t.name order by t.term_id asc) as category_names -- Include category names
from wp_term_relationships tr
inner join wp_term_taxonomy tt
on tr.term_taxonomy_id = tt.term_taxonomy_id
and tt.taxonomy = 'product_cat'
inner join wp_terms t
on tt.term_id = t.term_id
group by tr.object_id
) as pc
on pc.product_id = oimp.meta_value
left join (
select tr.object_id as product_id,
GROUP_CONCAT(t.term_id order by t.term_id asc) as tag_ids,
GROUP_CONCAT(t.name order by t.term_id asc) as tag_names
from wp_term_relationships tr
inner join wp_term_taxonomy tt
on tr.term_taxonomy_id = tt.term_taxonomy_id
and tt.taxonomy = 'product_tag'
inner join wp_terms t
on tt.term_id = t.term_id
group by tr.object_id
) as pt
on pt.product_id = oimp.meta_value
where oi.order_item_type = 'line_item'
and oi.order_id >= _order_id
LIMIT _max_records;

END;      
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(2169): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(174): aieo_create_sp_AIEO_Export_Orders_non_HPOS('wp_', 'wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_Export_Orders_non_HPOS(
        IN _price_sql_choice INT, 
        IN _text_sql_choice INT, 
        IN _full_text_sql_choice INT,
        IN _eponymous_sql_choice INT, 
        IN _seasonality_sql_choice INT, 
        IN _order_id INT, 
        IN _max_records INT
  ) BEGIN 
  TRUNCATE TABLE wp_aieo_temp_orders_table;
  INSERT INTO wp_aieo_temp_orders_table
(OrderId, OrderStatus, SKU,  ProductId, ParentProductId, CategoryId, TagId, OrderDate, PrimaryQty, ItemSequence, Stock, OrderSize, 
JourneyLinearWeight, AnonymousWeight, Price, LineValue, OrderItemsTotal, ValueLinearWeight, CurrentPrice, CurrentRegularPrice, ItemName,  ParentItemName, ItemNameDiff, 
ProfitabilityIndex, Brand, ContentIntro, ContentIntroPlain, ContentCreated, ContentLastUpdated, 
CategoryName, TagName, EponymousID, Seasonality)

SELECT  o.id as OrderId,
o.post_status as OrderStatus,
case 
when _text_sql_choice = 0
then ''
else COALESCE(psku.meta_value, '')
end as SKU,
COALESCE(case 
when oimpv.meta_value = 0
then oimp.meta_value
else oimpv.meta_value
end, '') as ProductId,
COALESCE(oimp.meta_value, '') as ParentProductId,
COALESCE(pc.category_ids, '') as CategoryId,
COALESCE(pt.tag_ids, '') as TagId,
o.post_date_gmt as OrderDate,
COALESCE(CONVERT(oimq.meta_value, decimal(3, 0)), '') as PrimaryQty,
ROW_NUMBER() over (
partition by o.id order by oi.order_item_id
) as ItemSequence,
COALESCE(pstock.meta_value, '') as Stock,
os.OrderSize,
ROW_NUMBER() over (
partition by o.id order by oi.order_item_id
) / os.OrderSize as JourneyLinearWeight,
(
case 
when _eponymous_sql_choice = 0
then '0'
else '1'
end
) as AnonymousWeight,
(
case 
when _price_sql_choice = 0
then ''
else convert(oims.meta_value / oimq.meta_value, decimal(5, 2))
end
) as Price,
(
case 
when _price_sql_choice = 0
then ''
else convert(oims.meta_value, decimal(7, 2))
end
) as LineValue,
( CASE WHEN _price_sql_choice = 0 THEN '' ELSE convert(pmot.meta_value , 
decimal(7, 2)) END ) as OrderItemsTotal,
(
case 
when _price_sql_choice = 0
then ''
else (
case 
when pmot.meta_value = 0
or pmot.meta_value is null
then '0'
else convert(oims.meta_value / pmot.meta_value, decimal(7, 2))
end
)
end
) as ValueLinearWeight,
(
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END 
      ) 
  END
  ) AS CurrentPrice,
  
  (
    CASE 
      WHEN _price_sql_choice = 0 THEN '' 
      ELSE (
        CASE 
          WHEN pm_regular_price.meta_value REGEXP '^[0-9.]+$' THEN CONVERT(pm_regular_price.meta_value, DECIMAL(7, 2)) 
          ELSE NULL 
        END
      ) 
  END
) AS CurrentRegularPrice,
(
case 
when _text_sql_choice = 0
then ''
else oi.order_item_name
end
) as ItemName,
(
case 
when _text_sql_choice = 0
then ''
else (
case 
when oimpv.meta_value = 0
then oi.order_item_name
else pmp.post_title
end
)
end
) as ParentItemName,
'' as ItemNameDiff,


  '1' as ProfitabilityIndex,
'' as Brand,
(
case 
when _full_text_sql_choice = 0
then ''
else (
case 
when oimpv.meta_value = 0
then pmp.post_content
else (
select parent.post_content
from wp_posts parent
where parent.ID = oimp.meta_value
)
end
)
end
) as ContentIntro,
(
    case 
    when _full_text_sql_choice = 0
    then ''
    else (
    case 
    when oimpv.meta_value = 0
    then pmp.post_content
    else (
    select parent.post_content
    from wp_posts parent
    where parent.ID = oimp.meta_value
    )
    end
    )
    end
    ) as ContentIntroPlain,
COALESCE(pmp.post_date_gmt, '2000-01-01 00:00:00') as ContentCreated,
COALESCE(pmp.post_modified_gmt, '2000-01-01 00:00:00') as ContentLastUpdated,
(
case 
when _text_sql_choice = 0
then ''
else COALESCE(pc.category_names, '')
end
) as CategoryName,

(
case 
when _text_sql_choice = 0
then ''
else COALESCE(pt.tag_names, '')
end
) as TagName,
(
case 
when _eponymous_sql_choice = 0
then '0'
else pmu.meta_value
end
) as EponymousID,
(
case 
when _seasonality_sql_choice = 0
then '0'
else '1'
end
) as Seasonality
FROM wp_woocommerce_order_items oi

INNER JOIN wp_posts o
ON o.ID = oi.order_id
AND o.post_type = 'shop_order'

INNER JOIN wp_woocommerce_order_itemmeta oimp
ON oi.order_item_id = oimp.order_item_id
AND oimp.meta_key = '_product_id'

LEFT JOIN wp_woocommerce_order_itemmeta oimpv
ON oi.order_item_id = oimpv.order_item_id
AND oimpv.meta_key = '_variation_id'

LEFT JOIN wp_woocommerce_order_itemmeta oimq
ON oi.order_item_id = oimq.order_item_id
AND oimq.meta_key = '_qty'

LEFT JOIN wp_woocommerce_order_itemmeta oims
ON oi.order_item_id = oims.order_item_id
AND oims.meta_key = '_line_subtotal'

INNER JOIN wp_postmeta as pmu
ON pmu.post_id = o.ID
AND pmu.meta_key = '_customer_user'

INNER JOIN wp_postmeta as pmot
ON pmot.post_id = o.ID
AND pmot.meta_key = '_order_total'

LEFT JOIN wp_posts pmp
ON pmp.ID = oimp.meta_value

LEFT JOIN wp_postmeta as psku
ON psku.post_id = CASE 
    WHEN oimpv.meta_value != '0' THEN oimpv.meta_value
    ELSE pmp.ID
END
AND psku.meta_key = '_sku'
LEFT JOIN wp_postmeta AS pm_price 
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pm_price.post_id 
AND pm_price.meta_key = '_price'

LEFT JOIN wp_postmeta AS pm_regular_price 
ON (
    CASE 
        WHEN oimpv.meta_value IS NOT NULL AND oimpv.meta_value != '0' THEN oimpv.meta_value
        ELSE oimp.meta_value
    END
) = pm_regular_price.post_id 
AND pm_regular_price.meta_key = '_regular_price'

LEFT JOIN wp_postmeta pstock
ON (
    CASE 
        WHEN oimpv.meta_value != '0' THEN oimpv.meta_value  
        ELSE oimp.meta_value                               
    END
) = pstock.post_id 
AND pstock.meta_key = '_stock'

left join (
select oi.order_id,
COUNT(distinct oimp.meta_value) as OrderSize
from wp_woocommerce_order_items oi
inner join wp_woocommerce_order_itemmeta oimp
on oi.order_item_id = oimp.order_item_id
and oimp.meta_key = '_product_id'
group by oi.order_id
) as os
on o.ID = os.order_id
left join (
select tr.object_id as product_id,
GROUP_CONCAT(t.term_id order by t.term_id asc) as category_ids,
GROUP_CONCAT(t.name order by t.term_id asc) as category_names -- Include category names
from wp_term_relationships tr
inner join wp_term_taxonomy tt
on tr.term_taxonomy_id = tt.term_taxonomy_id
and tt.taxonomy = 'product_cat'
inner join wp_terms t
on tt.term_id = t.term_id
group by tr.object_id
) as pc
on pc.product_id = oimp.meta_value
left join (
select tr.object_id as product_id,
GROUP_CONCAT(t.term_id order by t.term_id asc) as tag_ids,
GROUP_CONCAT(t.name order by t.term_id asc) as tag_names
from wp_term_relationships tr
inner join wp_term_taxonomy tt
on tr.term_taxonomy_id = tt.term_taxonomy_id
and tt.taxonomy = 'product_tag'
inner join wp_terms t
on tt.term_id = t.term_id
group by tr.object_id
) as pt
on pt.product_id = oimp.meta_value
where oi.order_item_type = 'line_item'
and oi.order_id >= _order_id
LIMIT _max_records;

END;      
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_Export_Orders_non_HPOS, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_StripHTMLAndReplicateContentIntro()
  BEGIN
  
    -- Declare variables
    DECLARE v_done INT DEFAULT 0;
    DECLARE v_ProductId INT;
    DECLARE v_ContentIntro TEXT;
  
    -- Declare cursor for unique ProductIds
    DECLARE cur_ProductIds CURSOR FOR 
        SELECT DISTINCT ProductId 
        FROM wp_aieo_temp_orders_table; 
  
    -- Declare handlers
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1;
  
    -- Open the cursor
    OPEN cur_ProductIds;
  
    -- Start the loop
    read_loop: LOOP
    
        FETCH cur_ProductIds INTO v_ProductId;
  
        IF v_done THEN
            LEAVE read_loop;
        END IF;
  
        -- Start a transaction
        START TRANSACTION;
  
        -- Update ContentIntro for the first occurrence based on OrderId for the current ProductId
        UPDATE wp_aieo_temp_orders_table 
        SET ContentIntro = AIEO_StripHTML(ContentIntro)
        WHERE ProductId = v_ProductId
        ORDER BY OrderId ASC
        LIMIT 1;
  
        -- Fetch the updated value
        SELECT ContentIntro INTO v_ContentIntro
        FROM wp_aieo_temp_orders_table
        WHERE ProductId = v_ProductId
        LIMIT 1;
  
        -- Copy the value to other instances with different OrderId
        UPDATE wp_aieo_temp_orders_table
        SET ContentIntro = v_ContentIntro
        WHERE ProductId = v_ProductId;
  
        -- Commit the transaction
        COMMIT;
  
    END LOOP;
  
    -- Close the cursor
    CLOSE cur_ProductIds;
  
  END;
</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1262): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(175): aieo_create_sp_AIEO_StripHTMLAndReplicateContentIntro('wp_', 'wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_StripHTMLAndReplicateContentIntro()
  BEGIN
  
    -- Declare variables
    DECLARE v_done INT DEFAULT 0;
    DECLARE v_ProductId INT;
    DECLARE v_ContentIntro TEXT;
  
    -- Declare cursor for unique ProductIds
    DECLARE cur_ProductIds CURSOR FOR 
        SELECT DISTINCT ProductId 
        FROM wp_aieo_temp_orders_table; 
  
    -- Declare handlers
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1;
  
    -- Open the cursor
    OPEN cur_ProductIds;
  
    -- Start the loop
    read_loop: LOOP
    
        FETCH cur_ProductIds INTO v_ProductId;
  
        IF v_done THEN
            LEAVE read_loop;
        END IF;
  
        -- Start a transaction
        START TRANSACTION;
  
        -- Update ContentIntro for the first occurrence based on OrderId for the current ProductId
        UPDATE wp_aieo_temp_orders_table 
        SET ContentIntro = AIEO_StripHTML(ContentIntro)
        WHERE ProductId = v_ProductId
        ORDER BY OrderId ASC
        LIMIT 1;
  
        -- Fetch the updated value
        SELECT ContentIntro INTO v_ContentIntro
        FROM wp_aieo_temp_orders_table
        WHERE ProductId = v_ProductId
        LIMIT 1;
  
        -- Copy the value to other instances with different OrderId
        UPDATE wp_aieo_temp_orders_table
        SET ContentIntro = v_ContentIntro
        WHERE ProductId = v_ProductId;
  
        -- Commit the transaction
        COMMIT;
  
    END LOOP;
  
    -- Close the cursor
    CLOSE cur_ProductIds;
  
  END;
 made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_StripHTMLAndReplicateContentIntro, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_RenameTable(IN oldTableName VARCHAR(255), IN newTableName VARCHAR(255))
  BEGIN
        -- Start transaction
        START TRANSACTION;
    
        -- Drop the table with new name if it already exists
        SET @drop_query = CONCAT('DROP TABLE IF EXISTS ', newTableName);
        PREPARE drop_stmt FROM @drop_query;
        EXECUTE drop_stmt;
        DEALLOCATE PREPARE drop_stmt;
    
        -- Rename the old table to the new table name
        SET @rename_query = CONCAT('RENAME TABLE ', oldTableName , ' TO ', newTableName);
        PREPARE rename_stmt FROM @rename_query;
        EXECUTE rename_stmt;
        DEALLOCATE PREPARE rename_stmt;
    
        -- Commit the transaction to finalize changes
        COMMIT;
  END;
  </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1292): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(176): aieo_create_sp_AIEO_RenameTable('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_RenameTable(IN oldTableName VARCHAR(255), IN newTableName VARCHAR(255))
  BEGIN
        -- Start transaction
        START TRANSACTION;
    
        -- Drop the table with new name if it already exists
        SET @drop_query = CONCAT('DROP TABLE IF EXISTS ', newTableName);
        PREPARE drop_stmt FROM @drop_query;
        EXECUTE drop_stmt;
        DEALLOCATE PREPARE drop_stmt;
    
        -- Rename the old table to the new table name
        SET @rename_query = CONCAT('RENAME TABLE ', oldTableName , ' TO ', newTableName);
        PREPARE rename_stmt FROM @rename_query;
        EXECUTE rename_stmt;
        DEALLOCATE PREPARE rename_stmt;
    
        -- Commit the transaction to finalize changes
        COMMIT;
  END;
   made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_RenameTable, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_UpdateContentWordCount(
      IN _table_name VARCHAR(255))
    BEGIN
        SET @query = CONCAT('UPDATE ', _table_name, ' SET ContentWordCount = AIEO_CountWords(ContentIntroPlain)');
        PREPARE stmt FROM @query;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END;
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1361): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(177): aieo_create_sp_AIEO_UpdateContentWordCount('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_UpdateContentWordCount(
      IN _table_name VARCHAR(255))
    BEGIN
        SET @query = CONCAT('UPDATE ', _table_name, ' SET ContentWordCount = AIEO_CountWords(ContentIntroPlain)');
        PREPARE stmt FROM @query;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END;
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_UpdateContentWordCount, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_UpdateContentOutgoingLinks (
        IN _table_name VARCHAR(255))
      BEGIN
          SET @query = CONCAT('UPDATE ', _table_name, ' SET ContentOutgoing = AIEO_CountLinks(ContentIntro)');
          PREPARE stmt FROM @query;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
      END ;
      </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1380): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(178): aieo_create_sp_AIEO_UpdateContentOutgoingLinks('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_UpdateContentOutgoingLinks (
        IN _table_name VARCHAR(255))
      BEGIN
          SET @query = CONCAT('UPDATE ', _table_name, ' SET ContentOutgoing = AIEO_CountLinks(ContentIntro)');
          PREPARE stmt FROM @query;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
      END ;
       made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_UpdateContentOutgoingLinks, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>
    CREATE PROCEDURE wp_AIEO_UpdateContentIntroPlain (IN tableName VARCHAR(255))
    BEGIN
        -- Declarations at the top
        DECLARE done INT DEFAULT FALSE;
        DECLARE v_ParentProductId INT;
        DECLARE v_ContentIntro TEXT;
        DECLARE v_cleanText TEXT;
        DECLARE cur CURSOR FOR SELECT ParentProductId, ContentIntro FROM temp_table;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

        -- Create a temporary table
        SET @sqlText = CONCAT('CREATE TEMPORARY TABLE temp_table AS SELECT DISTINCT ParentProductId, ContentIntro FROM ', tableName);
        PREPARE stmt FROM @sqlText;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        OPEN cur;

        read_loop: LOOP
            FETCH cur INTO v_ParentProductId, v_ContentIntro;

            IF done THEN
                LEAVE read_loop;
            END IF;

            -- You can use a user-defined function or do the stripping directly here
            SET v_cleanText = AIEO_StripHTML(v_ContentIntro);

            SET @updateText = CONCAT('UPDATE ', tableName, ' SET ContentIntroPlain = \'', v_cleanText, '\' WHERE ParentProductId = ', v_ParentProductId);
            PREPARE updateStmt FROM @updateText;
            EXECUTE updateStmt;
            DEALLOCATE PREPARE updateStmt;

        END LOOP;

        CLOSE cur;
        DROP TEMPORARY TABLE IF EXISTS temp_table;
    END;
    </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('\r\n    CREATE PR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('\r\n    CREATE PR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(1341): WP_SQLite_DB->query('\r\n    CREATE PR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(179): aieo_create_sp_AIEO_UpdateContentIntroPlain('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query 
    CREATE PROCEDURE wp_AIEO_UpdateContentIntroPlain (IN tableName VARCHAR(255))
    BEGIN
        -- Declarations at the top
        DECLARE done INT DEFAULT FALSE;
        DECLARE v_ParentProductId INT;
        DECLARE v_ContentIntro TEXT;
        DECLARE v_cleanText TEXT;
        DECLARE cur CURSOR FOR SELECT ParentProductId, ContentIntro FROM temp_table;
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

        -- Create a temporary table
        SET @sqlText = CONCAT('CREATE TEMPORARY TABLE temp_table AS SELECT DISTINCT ParentProductId, ContentIntro FROM ', tableName);
        PREPARE stmt FROM @sqlText;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        OPEN cur;

        read_loop: LOOP
            FETCH cur INTO v_ParentProductId, v_ContentIntro;

            IF done THEN
                LEAVE read_loop;
            END IF;

            -- You can use a user-defined function or do the stripping directly here
            SET v_cleanText = AIEO_StripHTML(v_ContentIntro);

            SET @updateText = CONCAT('UPDATE ', tableName, ' SET ContentIntroPlain = \'', v_cleanText, '\' WHERE ParentProductId = ', v_ParentProductId);
            PREPARE updateStmt FROM @updateText;
            EXECUTE updateStmt;
            DEALLOCATE PREPARE updateStmt;

        END LOOP;

        CLOSE cur;
        DROP TEMPORARY TABLE IF EXISTS temp_table;
    END;
     made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_AIEO_UpdateContentIntroPlain, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_UpdateProductCentricStats(IN target_table_name VARCHAR(255), IN use_product_id TINYINT)
        BEGIN
          DECLARE column_id VARCHAR(255);
          SET column_id = IF(use_product_id = 1, 'ProductId', 'ParentProductId');
  
          
          -- Update TotalItemSales

          SET @sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
          INNER JOIN (
              SELECT ', column_id, ', SUM(PrimaryQty) AS TotalItemSales
              FROM ', target_table_name, '
              GROUP BY ', column_id, '
          ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
          SET t1.TotalItemSales = t2.TotalItemSales;
          ');

          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
          
          -- Update DistinctOrderSales
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS DistinctOrderSales
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.DistinctOrderSales = t2.DistinctOrderSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update TotalTurnover
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', SUM(PrimaryQty * Price) AS TotalTurnover
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.TotalTurnover = t2.TotalTurnover;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update UniqueItemSales with ItemSequence = 1 AND OrderSize = 1
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS UniqueItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = 1 AND OrderSize = 1
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.UniqueItemSales = t2.UniqueItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update FirstItemSales with ItemSequence = 1
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS FirstItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = 1
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.FirstItemSales = t2.FirstItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update LastItemSales with ItemSequence = OrderSize
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS LastItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = OrderSize
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.LastItemSales = t2.LastItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update AvgJLW
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', AVG(JourneyLinearWeight) AS AvgJLWValue
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.AvgJLW = t2.AvgJLWValue;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update AvgVLW
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', AVG(ValueLinearWeight) AS AvgVLWValue
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.AvgVLW = t2.AvgVLWValue;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;


          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

      END;
</p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(544): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(180): aieo_create_sp_UpdateProductCentricStats('wp_')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_UpdateProductCentricStats(IN target_table_name VARCHAR(255), IN use_product_id TINYINT)
        BEGIN
          DECLARE column_id VARCHAR(255);
          SET column_id = IF(use_product_id = 1, 'ProductId', 'ParentProductId');
  
          
          -- Update TotalItemSales

          SET @sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
          INNER JOIN (
              SELECT ', column_id, ', SUM(PrimaryQty) AS TotalItemSales
              FROM ', target_table_name, '
              GROUP BY ', column_id, '
          ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
          SET t1.TotalItemSales = t2.TotalItemSales;
          ');

          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
          
          -- Update DistinctOrderSales
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS DistinctOrderSales
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.DistinctOrderSales = t2.DistinctOrderSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update TotalTurnover
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', SUM(PrimaryQty * Price) AS TotalTurnover
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.TotalTurnover = t2.TotalTurnover;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update UniqueItemSales with ItemSequence = 1 AND OrderSize = 1
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS UniqueItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = 1 AND OrderSize = 1
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.UniqueItemSales = t2.UniqueItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update FirstItemSales with ItemSequence = 1
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS FirstItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = 1
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.FirstItemSales = t2.FirstItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update LastItemSales with ItemSequence = OrderSize
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', COUNT(DISTINCT OrderId) AS LastItemSales
                  FROM ', target_table_name, '
                  WHERE ItemSequence = OrderSize
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.LastItemSales = t2.LastItemSales;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update AvgJLW
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', AVG(JourneyLinearWeight) AS AvgJLWValue
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.AvgJLW = t2.AvgJLWValue;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

          -- Update AvgVLW
          SET @sql = CONCAT('
              UPDATE ', target_table_name, ' AS t1
              INNER JOIN (
                  SELECT ', column_id, ', AVG(ValueLinearWeight) AS AvgVLWValue
                  FROM ', target_table_name, '
                  GROUP BY ', column_id, '
              ) AS t2 ON t1.', column_id, ' = t2.', column_id, '
              SET t1.AvgVLW = t2.AvgVLWValue;
          ');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;


          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;

      END;
 made by activate_plugin, do_action('activate_ai-eshop-optimizer/ai-eshop-optimizer.php'), WP_Hook->do_action, WP_Hook->apply_filters, aieo_create_stored_procedures, aieo_create_sp_UpdateProductCentricStats, WP_SQLite_DB->query, WP_SQLite_DB->print_error
[02-Jul-2025 15:59:46 UTC] WordPress database error <div style="clear:both">&nbsp;</div>
<div class="queries" style="clear:both;margin-bottom:2px;border:red dotted thin;">
<p>MySQL query:</p>
<p>CREATE PROCEDURE wp_AIEO_UpdateCustomerCentricStdStats(IN target_table_name VARCHAR(255), IN use_product_id TINYINT)
      BEGIN
          DECLARE column_id VARCHAR(255);
          SET column_id = IF(use_product_id = 1, 'ProductId', 'ParentProductId');
          
          -- Basic statistics regarding order size and spend
          SET @sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
              INNER JOIN (
                  SELECT EponymousId, 
                         AVG(OrderSize) AS AvgOrderSize, 
                         MAX(OrderSize) AS MaxOrderSize, 
                         MIN(OrderSize) AS MinOrderSize,
                         AVG(OrderItemsTotal) AS AvgSpend, 
                         MAX(OrderItemsTotal) AS MaxSpend, 
                         MIN(OrderItemsTotal) AS MinSpend
                  FROM ', target_table_name, ' 
                  WHERE EponymousId <> 0
                  GROUP BY EponymousId
              ) AS t2 ON t1.EponymousId = t2.EponymousId
              SET t1.AvgOrderSize = t2.AvgOrderSize,
                  t1.MaxOrderSize = t2.MaxOrderSize,
                  t1.MinOrderSize = t2.MinOrderSize,
                  t1.AvgSpend = t2.AvgSpend,
                  t1.MaxSpend = t2.MaxSpend,
                  t1.MinSpend = t2.MinSpend;');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
          
          -- Updating the total statistics
          SET @total_stats_sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
    INNER JOIN (
        SELECT EponymousId, 
               SUM(PrimaryQty) AS TotalCustomerItems, 
               COUNT(DISTINCT OrderId) AS TotalCustomerOrders, 
               SUM(LineValue) AS TotalCustomerTurnover
        FROM ', target_table_name, ' 
        WHERE EponymousId <> 0
        GROUP BY EponymousId
    ) AS t2 ON t1.EponymousId = t2.EponymousId
    SET t1.TotalCustomerItems = t2.TotalCustomerItems,
        t1.TotalCustomerOrders = t2.TotalCustomerOrders,
        t1.TotalCustomerTurnover = t2.TotalCustomerTurnover;');
PREPARE stmt_total FROM @total_stats_sql;
EXECUTE stmt_total;
DEALLOCATE PREPARE stmt_total;


-- Define session variables for row numbering
SET @EponymousId = NULL, @row_num = 0;

DROP TEMPORARY TABLE IF EXISTS TopProductsTemp;
CREATE TEMPORARY TABLE TopProductsTemp (
    EponymousId INT,
    Fav1Product INT DEFAULT NULL,
    Fav2Product INT DEFAULT NULL,
    Fav3Product INT DEFAULT NULL
);

SET @sql = CONCAT('
    INSERT INTO TopProductsTemp (EponymousId, Fav1Product, Fav2Product, Fav3Product)
    SELECT 
        EponymousId,
        MAX(CASE WHEN RowNum = 1 THEN ParentProductId ELSE NULL END) AS Fav1Product,
        MAX(CASE WHEN RowNum = 2 THEN ParentProductId ELSE NULL END) AS Fav2Product,
        MAX(CASE WHEN RowNum = 3 THEN ParentProductId ELSE NULL END) AS Fav3Product
    FROM (
        SELECT 
            EponymousId, 
            ParentProductId,
            SUM(PrimaryQty) AS TotalQty,
            @row_num := IF(@EponymousId = EponymousId, @row_num + 1, 1) AS RowNum,
            @EponymousId := EponymousId
        FROM 
            ', target_table_name, '
        WHERE EponymousId <> 0
        GROUP BY 
            EponymousId, ParentProductId
        ORDER BY 
            EponymousId, TotalQty DESC
    ) AS DerivedTable
    WHERE 
        RowNum <= 3
    GROUP BY 
        EponymousId;
');

PREPARE stmt2 FROM @sql;
EXECUTE stmt2;
DEALLOCATE PREPARE stmt2;

-- Update the main table using data from the temporary table
SET @sql = CONCAT('
    UPDATE ', target_table_name, ' AS t1 
    INNER JOIN TopProductsTemp AS t2 ON t1.EponymousId = t2.EponymousId
    SET 
        t1.Fav1Product = t2.Fav1Product,
        t1.Fav2Product = t2.Fav2Product,
        t1.Fav3Product = t2.Fav3Product;
');

PREPARE stmt3 FROM @sql;
EXECUTE stmt3;
DEALLOCATE PREPARE stmt3;

      END
  </p>
<p>Queries made or created this session were:</p>
<ol>
<li>Executing: BEGIN IMMEDIATE | (no parameters)</li>
<li>Executing: ROLLBACK | (no parameters)</li>
</ol>
</div>
<div style="clear:both;margin-bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">
MySQL query not supported. Cause: statement type: "createStatement" > "createProcedure"
</div>
<p>Backtrace:</p>
<pre>#0 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(887): WP_SQLite_Driver->new_not_supported_exception('statement type:...')
#1 /internal/shared/sqlite-database-integration/wp-includes/sqlite-ast/class-wp-sqlite-driver.php(669): WP_SQLite_Driver->execute_mysql_query(Object(WP_Parser_Node))
#2 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(491): WP_SQLite_Driver->query('CREATE PROCEDUR...')
#3 /internal/shared/sqlite-database-integration/wp-includes/sqlite/class-wp-sqlite-db.php(432): WP_SQLite_DB->_do_query('CREATE PROCEDUR...')
#4 /wordpress/wp-content/plugins/ai-eshop-optimizer/includes/sql/sprocs.php(663): WP_SQLite_DB->query('CREATE PROCEDUR...')
#5 /wordpress/wp-content/plugins/ai-eshop-optimizer/ai-eshop-optimizer.php(181): aieo_create_sp_AIEO_UpdateCustomerCentricStdStats('wp_', 'wp_aieo_temp_or...')
#6 /wordpress/wp-includes/class-wp-hook.php(324): aieo_create_stored_procedures(false)
#7 /wordpress/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#8 /wordpress/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#9 /wordpress/wp-admin/includes/plugin.php(703): do_action('activate_ai-esh...', false)
#10 /internal/eval.php(20): activate_plugin('ai-eshop-optimi...')
#11 {main}</pre>
 for query CREATE PROCEDURE wp_AIEO_UpdateCustomerCentricStdStats(IN target_table_name VARCHAR(255), IN use_product_id TINYINT)
      BEGIN
          DECLARE column_id VARCHAR(255);
          SET column_id = IF(use_product_id = 1, 'ProductId', 'ParentProductId');
          
          -- Basic statistics regarding order size and spend
          SET @sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
              INNER JOIN (
                  SELECT EponymousId, 
                         AVG(OrderSize) AS AvgOrderSize, 
                         MAX(OrderSize) AS MaxOrderSize, 
                         MIN(OrderSize) AS MinOrderSize,
                         AVG(OrderItemsTotal) AS AvgSpend, 
                         MAX(OrderItemsTotal) AS MaxSpend, 
                         MIN(OrderItemsTotal) AS MinSpend
                  FROM ', target_table_name, ' 
                  WHERE EponymousId <> 0
                  GROUP BY EponymousId
              ) AS t2 ON t1.EponymousId = t2.EponymousId
              SET t1.AvgOrderSize = t2.AvgOrderSize,
                  t1.MaxOrderSize = t2.MaxOrderSize,
                  t1.MinOrderSize = t2.MinOrderSize,
                  t1.AvgSpend = t2.AvgSpend,
                  t1.MaxSpend = t2.MaxSpend,
                  t1.MinSpend = t2.MinSpend;');
          PREPARE stmt FROM @sql;
          EXECUTE stmt;
          DEALLOCATE PREPARE stmt;
          
          -- Updating the total statistics
          SET @total_stats_sql = CONCAT('UPDATE ', target_table_name, ' AS t1 
    INNER JOIN (
        SELECT EponymousId, 
               SUM(PrimaryQty) AS TotalCustomerItems, 
               COUNT(DISTINCT OrderId) AS TotalCustomerOrders, 
               SUM(LineValue) AS TotalCustomerTurnover
        FROM ', target_table_name, ' 
        WHERE EponymousId <> 0
        GROUP BY EponymousId
    ) AS t2 ON t1.EponymousId = t2.EponymousId
    SET t1.TotalCustomerItems = t2.TotalCustomerItems,
        t1.TotalCustomerOrders = t2.TotalCustomerOrders,
        t1.TotalCustomerTurnover =
